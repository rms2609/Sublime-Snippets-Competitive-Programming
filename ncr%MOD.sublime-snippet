#define ll long long
const int MOD=1e9+7;
const int MAXN=1e5+5;
vector<long long> f(MAXN,1);
ll modpow (ll a, ll n) 
{                                //returns (a^n)%MOD
    ll res = 1LL; 
    a=a%MOD;
     while (n) 
      {
         if (n & 1)
                res =(res* a)%MOD;
           a =(a* a)%MOD;
           n >>= 1;
       }
 return res;
}

/* Modular Multiplicative Inverse
Using Euler's Theorem
a^(phi(m)) = 1 (mod m)
a^(-1) = a^(m-2) (mod m) */
long long InverseEuler(int n)
{
  return modpow(n,MOD-2);
}

long long C(int n, int r)
{ 
  return (f[n]*((InverseEuler(f[r]) * InverseEuler(f[n-r])) % MOD)) % MOD;
}

void init_f()
{
   for (int i=1; i<MAXN;i++)
      f[i]= (f[i-1]*i) % MOD;
}
